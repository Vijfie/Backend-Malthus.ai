import React, { useState } from 'react';
import { TrendingUp, AlertCircle, Clock, CheckCircle, BarChart3, Target, Shield, Zap, Brain, Globe, Activity, Newspaper, ArrowUpRight, ArrowDownRight, Minus, LineChart, PieChart } from 'lucide-react';
import { LineChart as RechartsLineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart as RechartsPieChart, Cell, AreaChart, Area, BarChart as RechartsBarChart, Bar, Pie } from 'recharts';

// Type definitions
interface Article {
  headline: string;
  summary: string;
  source: string;
  sentiment: 'positive' | 'negative' | 'neutral';
  score: number;
  url?: string;
  publishedAt?: string;
}

interface SentimentData {
  distribution: {
    positive: number;
    neutral: number;
    negative: number;
  };
  overall: 'positive' | 'negative' | 'neutral';
  score: number;
  articles: Article[];
}

interface ChartDataPoint {
  time: string;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  date?: string;
}

interface TechnicalIndicators {
  rsi?: number;
  macd?: {
    macd: number;
    signal: number;
    histogram: number;
  };
}

interface AnalysisData {
  symbol: string;
  assetType: 'stock' | 'crypto' | 'etf' | 'commodity' | 'index';
  company: string;
  sector: string;
  currentPrice: number;
  sentiment: SentimentData;
  technicalIndicators: TechnicalIndicators;
  chartData: ChartDataPoint[];
  news: Article[];
  timestamp: string;
}

interface SentimentChartData {
  name: string;
  value: number;
  color: string;
}

const App: React.FC = () => {
  const [input, setInput] = useState<string>('');
  const [analysis, setAnalysis] = useState<AnalysisData | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const analyzeStock = async (): Promise<void> => {
    if (!input.trim()) return;

    setLoading(true);
    setError('');
    setAnalysis(null);

    try {
      const response = await fetch('http://localhost:3001/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ symbol: input.trim().toUpperCase() }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Er is iets misgegaan');
      }

      const data: AnalysisData = await response.json();
      setAnalysis(data);
      setInput('');
    } catch (err: unknown) {
      const errorMessage = err instanceof Error ? err.message : 'Er is een onbekende fout opgetreden';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      analyzeStock();
    }
  };

  // Sentiment Components
  const SentimentDashboard: React.FC<{ sentiment: SentimentData }> = ({ sentiment }) => {
    const { distribution, overall, score, articles } = sentiment;
    
    const sentimentData: SentimentChartData[] = [
      { name: 'Positief', value: distribution.positive, color: '#10B981' },
      { name: 'Neutraal', value: distribution.neutral, color: '#6B7280' },
      { name: 'Negatief', value: distribution.negative, color: '#EF4444' }
    ];

    const getSentimentIcon = (sentimentType: string): React.ReactElement => {
      switch(sentimentType) {
        case 'positive': return <ArrowUpRight className="w-4 h-4 text-green-500" />;
        case 'negative': return <ArrowDownRight className="w-4 h-4 text-red-500" />;
        default: return <Minus className="w-4 h-4 text-gray-500" />;
      }
    };

    const getSentimentColor = (sentimentType: string): string => {
      switch(sentimentType) {
        case 'positive': return 'bg-green-50 border-green-200 text-green-800';
        case 'negative': return 'bg-red-50 border-red-200 text-red-800';
        default: return 'bg-gray-50 border-gray-200 text-gray-800';
      }
    };

    return (
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="flex items-center gap-3 mb-6">
          <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
            <Brain className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-gray-800">Nieuws & Sentiment Analyse</h3>
            <p className="text-sm text-gray-500">Real-time sentiment van {articles.length} nieuwsbronnen</p>
          </div>
        </div>

        {/* Overall Sentiment Score */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-600">Overall Sentiment</span>
              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSentimentColor(overall)}`}>
                {overall.toUpperCase()}
              </span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-2xl font-bold text-gray-800">{score.toFixed(1)}</span>
              <div className="flex-1 bg-gray-200 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full ${score >= 0 ? 'bg-green-500' : 'bg-red-500'}`}
                  style={{ width: `${Math.min(Math.abs(score), 100)}%` }}
                ></div>
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4">
            <span className="text-sm font-medium text-gray-600 mb-2 block">Sentiment Verdeling</span>
            <div className="h-24">
              <ResponsiveContainer width="100%" height="100%">
                <RechartsPieChart>
                  <Pie dataKey="value" data={sentimentData} cx="50%" cy="50%" innerRadius={20} outerRadius={40}>
                    {sentimentData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value: number) => [`${value} artikelen`, 'Aantal']} />
                </RechartsPieChart>
              </ResponsiveContainer>
            </div>
          </div>
        </div>

        {/* News Articles */}
        <div>
          <h4 className="font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <Newspaper className="w-5 h-5" />
            Recente Headlines ({articles.length})
          </h4>
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {articles.slice(0, 8).map((article: Article, index: number) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 mt-1">
                    {getSentimentIcon(article.sentiment)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h5 className="font-medium text-gray-800 mb-1 line-clamp-2">{article.headline}</h5>
                    <p className="text-sm text-gray-600 mb-2 line-clamp-2">{article.summary}</p>
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span className="font-medium">{article.source}</span>
                      <span className={`px-2 py-1 rounded-full ${getSentimentColor(article.sentiment)}`}>
                        {article.sentiment}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  // Enhanced Chart Component
  const EnhancedChart: React.FC<{ chartData: ChartDataPoint[]; technicalIndicators: TechnicalIndicators }> = ({ chartData, technicalIndicators }) => {
    const [chartType, setChartType] = useState<'price' | 'volume'>('price');
    
    if (!chartData || chartData.length === 0) {
      return (
        <div className="bg-white rounded-2xl shadow-lg p-6">
          <div className="text-center py-8">
            <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-500">Chart data wordt geladen...</p>
          </div>
        </div>
      );
    }

    const processedData = chartData.map((item: ChartDataPoint) => ({
      ...item,
      date: new Date(item.time).toLocaleDateString('nl-NL', { month: 'short', day: 'numeric' })
    }));

    return (
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-green-500 rounded-xl flex items-center justify-center">
              <LineChart className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800">Interactive Chart</h3>
              <p className="text-sm text-gray-500">1-jaar prijshistorie met technische indicatoren</p>
            </div>
          </div>
          
          <div className="flex gap-2">
            <button
              onClick={() => setChartType('price')}
              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                chartType === 'price' ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              Prijs
            </button>
            <button
              onClick={() => setChartType('volume')}
              className={`px-3 py-1 rounded-lg text-sm font-medium transition-colors ${
                chartType === 'volume' ? 'bg-blue-500 text-white' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              Volume
            </button>
          </div>
        </div>

        <div className="h-80 mb-6">
          <ResponsiveContainer width="100%" height="100%">
            {chartType === 'price' ? (
              <AreaChart data={processedData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="date" 
                  stroke="#6b7280"
                  fontSize={12}
                  tickLine={false}
                />
                <YAxis 
                  stroke="#6b7280"
                  fontSize={12}
                  tickLine={false}
                  domain={['dataMin - 5', 'dataMax + 5']}
                />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                  }}
                  formatter={(value: number) => [`$${value.toFixed(2)}`, 'Prijs']}
                />
                <Area
                  type="monotone"
                  dataKey="close"
                  stroke="#3b82f6"
                  strokeWidth={2}
                  fill="url(#priceGradient)"
                />
                <defs>
                  <linearGradient id="priceGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.3}/>
                    <stop offset="95%" stopColor="#3b82f6" stopOpacity={0.05}/>
                  </linearGradient>
                </defs>
              </AreaChart>
            ) : (
              <RechartsBarChart data={processedData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis 
                  dataKey="date" 
                  stroke="#6b7280"
                  fontSize={12}
                  tickLine={false}
                />
                <YAxis 
                  stroke="#6b7280"
                  fontSize={12}
                  tickLine={false}
                />
                <Tooltip 
                  contentStyle={{
                    backgroundColor: 'white',
                    border: '1px solid #e5e7eb',
                    borderRadius: '8px',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                  }}
                  formatter={(value: number) => [value.toLocaleString(), 'Volume']}
                />
                <Bar dataKey="volume" fill="#10b981" radius={[2, 2, 0, 0]} />
              </RechartsBarChart>
            )}
          </ResponsiveContainer>
        </div>

        {/* Technical Indicators */}
        {technicalIndicators && (
          <div className="grid md:grid-cols-3 gap-4">
            <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-4">
              <div className="flex items-center gap-2 mb-2">
                <Activity className="w-4 h-4 text-purple-600" />
                <span className="text-sm font-medium text-gray-700">RSI (14)</span>
              </div>
              <div className="text-2xl font-bold text-gray-800">{technicalIndicators.rsi?.toFixed(1) || 'N/A'}</div>
              <div className="text-xs text-gray-500 mt-1">
                {technicalIndicators.rsi && technicalIndicators.rsi > 70 ? 'Overbought' : technicalIndicators.rsi && technicalIndicators.rsi < 30 ? 'Oversold' : 'Neutral'}
              </div>
            </div>

            <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-4">
              <div className="flex items-center gap-2 mb-2">
                <TrendingUp className="w-4 h-4 text-green-600" />
                <span className="text-sm font-medium text-gray-700">MACD</span>
              </div>
              <div className="text-2xl font-bold text-gray-800">
                {technicalIndicators.macd?.macd?.toFixed(3) || 'N/A'}
              </div>
              <div className="text-xs text-gray-500 mt-1">
                Signal: {technicalIndicators.macd?.signal?.toFixed(3) || 'N/A'}
              </div>
            </div>

            <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-xl p-4">
              <div className="flex items-center gap-2 mb-2">
                <Target className="w-4 h-4 text-orange-600" />
                <span className="text-sm font-medium text-gray-700">Momentum</span>
              </div>
              <div className="text-2xl font-bold text-gray-800">
                {technicalIndicators.macd?.histogram ? (technicalIndicators.macd.histogram > 0 ? '+' : '') + technicalIndicators.macd.histogram.toFixed(3) : 'N/A'}
              </div>
              <div className="text-xs text-gray-500 mt-1">
                {technicalIndicators.macd?.histogram && technicalIndicators.macd.histogram > 0 ? 'Bullish' : 'Bearish'}
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Asset Type Badge
  const AssetTypeBadge: React.FC<{ assetType: string }> = ({ assetType }) => {
    const getAssetConfig = (type: string) => {
      switch(type) {
        case 'crypto': return { color: 'bg-orange-100 text-orange-800', icon: '₿', label: 'Cryptocurrency' };
        case 'etf': return { color: 'bg-purple-100 text-purple-800', icon: '📊', label: 'ETF' };
        case 'commodity': return { color: 'bg-yellow-100 text-yellow-800', icon: '🥇', label: 'Commodity' };
        case 'index': return { color: 'bg-indigo-100 text-indigo-800', icon: '📈', label: 'Index' };
        default: return { color: 'bg-blue-100 text-blue-800', icon: '📈', label: 'Stock' };
      }
    };

    const config = getAssetConfig(assetType);
    
    return (
      <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${config.color}`}>
        <span>{config.icon}</span>
        {config.label}
      </span>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-r from-blue-600 to-green-500 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-green-500 bg-clip-text text-transparent">
                  TradingAI
                </h1>
                <p className="text-sm text-gray-500">AI-Powered Financial Analysis</p>
              </div>
            </div>
            <div className="flex gap-3">
              <button className="px-4 py-2 text-blue-600 border border-blue-600 rounded-full hover:bg-blue-50 transition-colors">
                Inloggen
              </button>
              <button className="px-4 py-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors">
                Start Gratis
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-6 py-12">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-green-500 bg-clip-text text-transparent mb-4">
            Enhanced AI Analysis Tool
          </h1>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Professionele analyses met real-time sentiment, technische indicatoren en multi-asset support. 
            Powered by advanced AI en machine learning.
          </p>

          {/* Search Interface */}
          <div className="max-w-md mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <label className="block text-sm font-medium text-gray-700 mb-3 text-left">
                Voer symbool in (Stocks, Crypto, ETFs, Indices)
              </label>
              <div className="flex gap-3">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="bijv. AAPL, BTC, SPY, ^GSPC"
                  disabled={loading}
                  className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none text-lg font-mono uppercase"
                />
                <button
                  onClick={analyzeStock}
                  disabled={loading || !input.trim()}
                  className="px-6 py-3 bg-gradient-to-r from-blue-600 to-green-500 text-white rounded-xl hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 font-medium transition-all"
                >
                  {loading ? (
                    <>
                      <Clock className="w-5 h-5 animate-spin" />
                      Analyseren...
                    </>
                  ) : (
                    <>
                      <Zap className="w-5 h-5" />
                      Analyseer
                    </>
                  )}
                </button>
              </div>
              {error && (
                <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-xl flex items-start gap-3">
                  <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />
                  <p className="text-red-700 text-sm">{error}</p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Enhanced Analysis Results */}
        {analysis && (
          <div className="space-y-8">
            {/* Enhanced Analysis Header */}
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden">
              <div className="bg-gradient-to-r from-blue-600 to-green-500 px-8 py-6 text-white">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="flex items-center gap-3 mb-2">
                      <h2 className="text-2xl font-bold">{analysis.company}</h2>
                      <AssetTypeBadge assetType={analysis.assetType} />
                    </div>
                    <p className="text-blue-100">
                      {analysis.symbol} • {analysis.sector}
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold">${analysis.currentPrice?.toFixed(2)}</div>
                    <div className="flex items-center gap-2 mt-1">
                      <CheckCircle className="w-5 h-5 text-green-300" />
                      <span className="text-sm">Live Data</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced Chart */}
            {analysis.chartData && (
              <EnhancedChart 
                chartData={analysis.chartData} 
                technicalIndicators={analysis.technicalIndicators}
              />
            )}

            {/* Sentiment Analysis Dashboard */}
            {analysis.sentiment && (
              <SentimentDashboard sentiment={analysis.sentiment} />
            )}

            {/* Market Overview Cards */}
            <div className="grid md:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-blue-600" />
                  </div>
                  <span className="font-medium text-gray-700">Trend</span>
                </div>
                <div className="text-2xl font-bold text-gray-800">
                  {(analysis.technicalIndicators?.rsi && analysis.technicalIndicators.rsi > 50) ? 'Bullish' : 'Bearish'}
                </div>
                <div className="text-sm text-gray-500 mt-1">
                  RSI: {analysis.technicalIndicators?.rsi?.toFixed(1) || 'N/A'}
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                    <Brain className="w-5 h-5 text-green-600" />
                  </div>
                  <span className="font-medium text-gray-700">AI Sentiment</span>
                </div>
                <div className="text-2xl font-bold text-gray-800 capitalize">
                  {analysis.sentiment?.overall || 'Neutral'}
                </div>
                <div className="text-sm text-gray-500 mt-1">
                  Score: {analysis.sentiment?.score?.toFixed(1) || '0.0'}
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                    <Newspaper className="w-5 h-5 text-purple-600" />
                  </div>
                  <span className="font-medium text-gray-700">News Count</span>
                </div>
                <div className="text-2xl font-bold text-gray-800">
                  {analysis.news?.length || 0}
                </div>
                <div className="text-sm text-gray-500 mt-1">
                  Laatste 7 dagen
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center gap-3 mb-3">
                  <div className="w-8 h-8 bg-orange-100 rounded-lg flex items-center justify-center">
                    <Activity className="w-5 h-5 text-orange-600" />
                  </div>
                  <span className="font-medium text-gray-700">Volatility</span>
                </div>
                <div className="text-2xl font-bold text-gray-800">
                  {(analysis.technicalIndicators?.rsi && (analysis.technicalIndicators.rsi > 70 || analysis.technicalIndicators.rsi < 30)) ? 'High' : 'Normal'}
                </div>
                <div className="text-sm text-gray-500 mt-1">
                  Asset type: {analysis.assetType}
                </div>
              </div>
            </div>

            {/* CTA Section */}
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="bg-gradient-to-r from-blue-50 to-green-50 rounded-2xl p-6 text-center">
                <h3 className="text-xl font-bold text-gray-800 mb-2">
                  Wil je meer geavanceerde analyses?
                </h3>
                <p className="text-gray-600 mb-4">
                  Krijg toegang tot real-time sentiment tracking, advanced technische indicatoren en AI-powered price predictions
                </p>
                <div className="flex gap-3 justify-center">
                  <button className="px-6 py-3 bg-gradient-to-r from-blue-600 to-green-500 text-white rounded-xl hover:shadow-lg transition-all font-medium">
                    Upgrade naar Pro
                  </button>
                  <button className="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors font-medium">
                    Bekijk Demo
                  </button>
                </div>
              </div>
              
              {/* Timestamp */}
              <div className="mt-6 text-center text-sm text-gray-500">
                Enhanced analyse gegenereerd op: {new Date(analysis.timestamp).toLocaleString('nl-NL')}
              </div>
            </div>
          </div>
        )}

        {/* Empty State */}
        {!analysis && !loading && (
          <div className="max-w-4xl mx-auto">
            <div className="bg-white rounded-2xl shadow-lg p-8">
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-green-500 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <BarChart3 className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-gray-800 mb-3">
                  Professional Multi-Asset Analysis Engine
                </h3>
                <p className="text-gray-600 text-lg">
                  Krijg institutionele-level analyses voor stocks, crypto, ETFs en indices met real-time sentiment, 
                  technische indicators en AI-powered insights.
                </p>
              </div>

              <div className="grid md:grid-cols-3 gap-6">
                <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6">
                  <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mb-4">
                    <TrendingUp className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="font-bold text-blue-800 mb-3">Technische Analyse</h4>
                  <ul className="text-blue-700 space-y-2 text-sm">
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                      Real-time RSI & MACD
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                      Support/Resistance levels
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                      Interactive charts
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                      Multi-timeframe analysis
                    </li>
                  </ul>
                </div>

                <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-6">
                  <div className="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mb-4">
                    <Brain className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="font-bold text-green-800 mb-3">AI Sentiment Engine</h4>
                  <ul className="text-green-700 space-y-2 text-sm">
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      Multi-source news analysis
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      Real-time sentiment scoring
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      Social media integration
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-green-500 rounded-full"></div>
                      Market mood tracking
                    </li>
                  </ul>
                </div>

                <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-2xl p-6">
                  <div className="w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center mb-4">
                    <Globe className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="font-bold text-purple-800 mb-3">Multi-Asset Support</h4>
                  <ul className="text-purple-700 space-y-2 text-sm">
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-purple-500 rounded-full"></div>
                      Stocks & ETFs
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-purple-500 rounded-full"></div>
                      Cryptocurrencies
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-purple-500 rounded-full"></div>
                      Commodities & Indices
                    </li>
                    <li className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-purple-500 rounded-full"></div>
                      Auto-detection engine
                    </li>
                  </ul>
                </div>
              </div>

              <div className="mt-8 bg-gray-50 rounded-2xl p-6 text-center">
                <p className="text-gray-600 mb-4">
                  <strong>Populaire symbolen om te testen:</strong>
                </p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  <div>
                    <p className="text-xs font-medium text-gray-500 mb-2">Stocks</p>
                    <div className="flex flex-wrap gap-1">
                      {['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA'].map(symbol => (
                        <button
                          key={symbol}
                          onClick={() => setInput(symbol)}
                          className="px-2 py-1 bg-white border border-gray-200 rounded text-xs font-mono hover:border-blue-500 hover:text-blue-600 transition-colors"
                        >
                          {symbol}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div>
                    <p className="text-xs font-medium text-gray-500 mb-2">Crypto</p>
                    <div className="flex flex-wrap gap-1">
                      {['BTC', 'ETH', 'ADA', 'SOL', 'MATIC', 'AVAX'].map(symbol => (
                        <button
                          key={symbol}
                          onClick={() => setInput(symbol)}
                          className="px-2 py-1 bg-white border border-gray-200 rounded text-xs font-mono hover:border-orange-500 hover:text-orange-600 transition-colors"
                        >
                          {symbol}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div>
                    <p className="text-xs font-medium text-gray-500 mb-2">ETFs</p>
                    <div className="flex flex-wrap gap-1">
                      {['SPY', 'QQQ', 'VTI', 'ARKK', 'GLD', 'TQQQ'].map(symbol => (
                        <button
                          key={symbol}
                          onClick={() => setInput(symbol)}
                          className="px-2 py-1 bg-white border border-gray-200 rounded text-xs font-mono hover:border-purple-500 hover:text-purple-600 transition-colors"
                        >
                          {symbol}
                        </button>
                      ))}
                    </div>
                  </div>
                  <div>
                    <p className="text-xs font-medium text-gray-500 mb-2">Indices</p>
                    <div className="flex flex-wrap gap-1">
                      {['^GSPC', '^IXIC', '^DJI', '^RUT', '^VIX', '^TNX'].map(symbol => (
                        <button
                          key={symbol}
                          onClick={() => setInput(symbol)}
                          className="px-2 py-1 bg-white border border-gray-200 rounded text-xs font-mono hover:border-indigo-500 hover:text-indigo-600 transition-colors"
                        >
                          {symbol}
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="bg-white border-t mt-20">
        <div className="max-w-6xl mx-auto px-6 py-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-600 to-green-500 rounded-lg flex items-center justify-center">
                <TrendingUp className="w-5 h-5 text-white" />
              </div>
              <span className="font-bold bg-gradient-to-r from-blue-600 to-green-500 bg-clip-text text-transparent">
                TradingAI
              </span>
            </div>
            <p className="text-gray-500 text-sm">
              © 2025 TradingAI. Advanced AI-powered financial analysis platform.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default App;